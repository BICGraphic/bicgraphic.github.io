//*********************************************************************************
// Creado por ALBERT ISUAR SOLE para el Departamento Gráfico de Bic Graphic Europe
// Fecha de última actualización: 17 de enero de 2020
//*********************************************************************************

#include "illustratordocument_class.jsxinc"
#include "exception_class.jsxinc"
#include "basiccolors_class.jsxinc"
"use strict";

// Anclaje para posicionar el producto
var anchor = {
    LOWER_RIGHT: 0,
    UPPER_LEFT: 1
};

/**
 * Clase que contiene un registro de un producto
 * @param {File}   productTemplateFile  El archivo del registro del producto
 * @param {object} productConfiguration La configuración del producto
 * @param {object} graphicDesigner      Referencia a la clase GraphicDesigner
 */
function ProductTemplate(productTemplateFile, productConfiguration, graphicDesigner) {
    this.productTemplateFile = productTemplateFile;
    this.productConfiguration = productConfiguration;
    this.graphicDesigner = graphicDesigner;
    this.productTemplateDocument = null;
}

/**
 * Abre el documento que contiene el registro del producto
 */
ProductTemplate.prototype.openProductTemplate = function () {
    this.productTemplateDocument = new IllustratorDocument();
    this.productTemplateDocument.openDocument(this.productTemplateFile);
};


/**
 * Añade la información sobre el acabado de la etiqueta (brillante o mate)
 * @param {object} printingInformation Un objeto de tipo PrinttingInformation
 */
ProductTemplate.prototype.addFinishInformation = function (printingInformation) {
    this.printingInformation = printingInformation;

    for (var p = 0; p < printingInformation.length; p++) {
        for (var r = 0; r < printingInformation[p].SpecialOperations.length; r++) {
            try {
                // Si el pedido tiene configurado un acabado, averiguamos cual es, buscamos el "tick" a modificar en el documento
                // y le aplicamos un color de relleno de color rojo
                var finish = printingInformation[p].SpecialOperations[r].Name;
                var element;
                
                if (finish != null) {
                    switch (finish) {
                        case "DGP Brilliant film":
                            for (var c = 0; c < this.productTemplateDocument.docRef.pageItems.length; c++){
                                element = this.productTemplateDocument.docRef.pageItems[c];
                                if (element.name == "Brilliant_tag"){
                                    element.fillColor = BasicColor.red();
                                }
                            }
                            break;
                        case "DGP Matte film":
                            for (var c = 0; c < this.productTemplateDocument.docRef.pageItems.length; c++){
                                element = this.productTemplateDocument.docRef.pageItems[c];
                                if (element.name == "Matt_tag"){
                                    element.fillColor = BasicColor.red();
                                }
                            }
                            break;
                    }
                }
            } catch (e) {

            }
        }
    }
};


/**
 * Colorea el producto según la configuración del pedido
 */
ProductTemplate.prototype.colourTheProduct = function () {
    // Nombre de la capa en el registro donde estaran los colores de los atributos
    var layerAttributeName = "Attribute_colours";
    // Colección de muestras de un documento de tipo Swatch
    var docSwatch;
    // Colección de colores de atributos en un documento de tipo PathItem
    var docAttributeColour;
    // Nombre de un atributo
    var attributeName;
    // Objeto LabColor
    var labColour;
    // Valores LAB de un color
    var labValues;
    // Colección de componentes que no se han podido colorear correctamente
    var attributeError = [];
    var textReference;

    // Si no hay configuración, salimos de la función
    if (this.productConfiguration == null) return;

    // Si no existe la capa con los colores en el documento, salimos de la función.
    try {
        var layerExist = this.productTemplateDocument.docRef.layers.getByName(layerAttributeName);
    } catch (e) {
        return;
    }

    var component_color;

    for (var i in this.productConfiguration) {
        try {
            attributeName = this.productConfiguration[i].ComponentType.toLowerCase();

            try {
                component_color = attributeName + "-" + this.productConfiguration[i].Colour;
                docAttributeColour = this.productTemplateDocument.docRef.layers[layerAttributeName].pathItems.getByName(component_color);
            }
            catch (f){}
            
            if (docAttributeColour == undefined)
                docAttributeColour = this.productTemplateDocument.docRef.layers[layerAttributeName].pathItems.getByName(this.productConfiguration[i].Colour);

            docSwatch = this.productTemplateDocument.docRef.swatches.getByName(attributeName);
            labValues = docAttributeColour.fillColor.spot.getInternalColor();

            // Creamos un color LAB con los valores del color de atributo
            labColour = new LabColor();
            labColour.l = labValues[0];
            labColour.a = labValues[1];
            labColour.b = labValues[2];

            // Aplicamos el nuevo color LAB definido 
            docSwatch.color.spot.color = labColour;

            // Cambiamos el nombre de la muestra para que no coincida con la que pueda haber en el PDF
            docSwatch.name += new Date().getMilliseconds().toString();
        } catch (e) {
            attributeError.push(attributeName);
        }

        try {
            // Aplicamos transparencia a los objetos del registro
            // y cambiamos el código del atributo, si existe
            if (docAttributeColour != undefined) {
                for (var c = 0; c < this.productTemplateDocument.docRef.pageItems.length; c++) {
                    if (this.productTemplateDocument.docRef.pageItems[c].name.toLowerCase() == attributeName && this.productTemplateDocument.docRef.pageItems[c].typename == "RasterItem") {
                        this.productTemplateDocument.docRef.pageItems[c].opacity = docAttributeColour.opacity;
                        this.productTemplateDocument.docRef.pageItems[c].blendingMode = docAttributeColour.blendingMode;
                    }

                    if (this.productTemplateDocument.docRef.pageItems[c].name.toLowerCase() == attributeName && this.productTemplateDocument.docRef.pageItems[c].typename == "TextFrame") {
                        this.productTemplateDocument.docRef.pageItems[c].contents = this.productConfiguration[i].Colour + " (" + this.productConfiguration[i].ColourCatalogueCode + ")";
                        this.productTemplateDocument.docRef.pageItems[c].textRange.characterAttributes.horizontalScale = 80;
                    }
                }
            }

        } catch (e) {
            
        }

        // Liberamos el contenido de las variables
        attributeName = null;
        docSwatch = null;
        docAttributeColour = undefined;
        labColour = null;
        labValues = null;
        textReference = null;
    }

    if (attributeError.length != 0) {
        var listErrors = " ";

        for (var j = 0; j < attributeError.length; j++) {
            listErrors += "\n" + attributeError[j];
        }

        new CustomException("Error al colorear los atributos: " + listErrors, "There's been an error colouring the trims: " + listErrors).show(this.graphicDesigner.language, "INFORMATION", false);
    }
};

ProductTemplate.prototype.copyProductToDocument = function (orderData, destDoc, destLayer) {
        var printingTechniques = {
        "Screen printing": {
            wheight: 1,
        },
        "Screen Printing": {
            wheight: 1,
        },
        "Britepix": {
            wheight: 2,
        },
        "BritePix": {
            wheight: 2,
        },
        "Digital transfer": {
            wheight: 3,
        },
        "Digital Transfer": {
            wheight: 3,
        }
    }
    var productConfiguration = orderData.ProductConfiguration;
    var printingInformation = orderData.PrintingInformation;
    var productGroupName;
    var productGroupCopy;
    for (var i = 0; i < productConfiguration.length; i++) {
        var productCode = productConfiguration[i].ProductCode;
        var printingTechnique;
        for (var j = 0; j < printingInformation.length; j++) {
            if (!printingTechnique) printingTechnique = printingInformation[j].PrintMethod;
            if (printingTechniques[printingInformation[j].PrintMethod] && printingTechniques[printingInformation[j].PrintMethod].wheight > printingTechniques[printingTechnique].wheight) {
                printingTechnique = printingInformation[j].PrintMethod;
            }
        }
        productGroupName = productCode + "#" + printingTechnique;
        var itemsLayer;
        try {
            itemsLayer = this.productTemplateDocument.docRef.layers.getByName("ITEMS")
        }
        catch (e){
            continue;
        }
        var productGroup;
        try {
            productGroup = itemsLayer.groupItems.getByName(productGroupName);
        }
        catch (e){
            continue;
        }
        if (destLayer) {
            productGroupCopy = productGroup.duplicate(destLayer, ElementPlacement.PLACEATBEGINNING);
        }
        else {
            productGroupCopy = productGroup.duplicate(destDoc.docRef, ElementPlacement.PLACEATBEGINNING);
        }
        productGroupCopy.name = productGroupName;
    }
    return productGroupCopy;
}