//*********************************************************************************
// Creado por ALBERT ISUAR SOLE para el Departamento Gráfico de Bic Graphic Europe
// Fecha de última actualización: 1 de febrero de 2019
//*********************************************************************************

#include "json.jsxinc"
"use strict";

/**
 * Clase para definir un resultado de retorno
 */
function ScriptResult() {
    this.Info = [];
}


/**
 * Crea un objeto ObjectDefinition para añadirlo a una colección posteriormente
 * @param {string} name   El nombre completo con la técnica de impresión, el componente y la posición
 * @param {string} colour OPCIONAL. El color de impresión. Si no se proporciona información, será "null"
 */
function ObjectDefinition(name, colour) {
    this.Technique = null;
    this.PrintedComponent = null;
    this.PrintPosition = null;
    this.Area = null;
    this.Name = name;
    this.Colour = colour;
    var hashtag = "#";
    var underscore = "_";
    var ci = 0;
    var i;
    var search;
    
    if (colour == undefined) this.Colour = null;
    
    if (name == null) return;
    
    // Buscamos la técnica de impresión
    for (i = ci; i < name.length; i++) {
        if (name[i] == hashtag) {
            this.Technique = name.substring(0, i);
            ci = i + 1;
            break;
        }
    }

    // Buscamos el Printed Component
    for (i = ci; i < name.length; i++) {
        if (name[i] == hashtag) {
            this.PrintedComponent = name.substring(ci, i);
            ci = i + 1;
            break;
        }
    }
    
    // Inicialmente establecemos el Print Position con el resto del nombre
    this.PrintPosition = name.substring(ci);
    
    if (this.PrintPosition.indexOf(underscore) != -1) search = underscore;
    if (this.PrintPosition.indexOf(hashtag) != -1) search = hashtag;

    // Buscamos el Print Position
    for (i = ci; i < name.length; i++) {
        if (name[i] == search) {
            this.PrintPosition = name.substring(ci, i);
            ci = i + 1;
            break;
        }
    }

    this.Area = this.PrintedComponent + hashtag + this.PrintPosition;
}


/**
 * Crea un objeto File a partir de una colección de ObjectsDefinition y lo añade a una colección de objetos Info
 * @param {string} path                  La ruta completa del archivo
 * @param {Array}  arrayObjectDefinition Colección de objetos ObjectDefinition
 */
ScriptResult.prototype.addFileObject = function (path, arrayObjectDefinition) {
    var file = {
        File: {
            Path: path,
            Objects: arrayObjectDefinition
        }
    };

    this.Info.push(file);
};


/**
 * Crea el objeto final con todas sus propiedades
 * @param   {object} errorInfo OPCIONAL. Objeto Error con la información sobre el error
 * @returns {object} Un objeto JSON con las propiedades
 */
ScriptResult.prototype.result = function (errorInfo) {
    var totalInfo;
    
    if (errorInfo == undefined) {
        totalInfo = {
            Result: "OK",
            Info: this.Info
        };
    } else {
        totalInfo = {
            Result: "FAILED",
            Error: errorInfo
        };
    }
    
    return JSON.stringify(totalInfo);
};
