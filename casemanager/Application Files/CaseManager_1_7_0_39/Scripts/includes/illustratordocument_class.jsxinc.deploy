//*********************************************************************************
// Creado por ALBERT ISUAR SOLE para el Departamento Gráfico de Bic Graphic Europe
// Fecha de última actualización: 5 de mayo de 2020
//*********************************************************************************

#include "exception_class.jsxinc"
#include "inkobject_class.jsxinc"
#include "date_class.jsxinc"
"use strict";

/**
 * Clase con la referencia a un documento de Illustrator
 */
function IllustratorDocument() {
    // Referencia al documento activo
    this.docRef = null;
    // Referencia a la selección del documento
    this.selRef = null;
    // Los colores de un documento de tipo Ink
    this.inks = [];
}

/**
 * Obtiene la referencia al documento actual
 * @throws {Exception} Lanza una excepción si no ha podido determinar el documento actual
 */
IllustratorDocument.prototype.getActiveDocument = function () {
    for (var i = 0; i < app.documents.length; i++) {
        if (app.documents[i].name == app.activeDocument.name) {
            this.docRef = app.documents[i];
        }
    }

    if (this.docRef == null) throw new CustomException("Error al seleccionar el documento actual", "Unknown error with the current document");
};

/**
 * Abre un documento Illustrator
 * @throws {CustomException} Lanza una excepción si el archivo no existe
 * @param {File} newDoc El archivo con la ruta completa
 */
IllustratorDocument.prototype.openDocument = function (newDoc) {
    if (!newDoc.exists) {
        throw new CustomException("El archivo <" + newDoc.displayName + "> no existe o el nombre no es correcto", "The file <" + newDoc.displayName + "> does not exist or wrong name");
    }

    this.docRef = app.open(newDoc);
};

/**
 * Obtiene la selección del documento actual
 * @throws {Exception} Lanza una excepción si no hay nada seleccionado en el documento
 */
IllustratorDocument.prototype.getSelection = function () {
    if (this.docRef.selection.length > 1) {
        var groupitem = this.docRef.groupItems.add();
        
        for (var i = 0; i < this.docRef.selection.length; i++) {
            this.docRef.selection[i].move(groupitem, ElementPlacement.PLACEATEND);
        }
        
        this.docRef.selection = groupitem;
    }
    
    this.selRef = this.docRef.selection[0];

    if (this.selRef == undefined) throw new CustomException("Es necesario seleccionar un diseño", "A selection is required");
};

/**
 * Obtiene las tintas que contiene un documento
 * @throws {Exception} Lanza una excepción si no contiene ninguna tinta
 * @returns {Array} Lista de las tintas que contiene el documento
 */
IllustratorDocument.prototype.getPrintingColours = function () {
    var i;

    for (i = 4; i < this.docRef.inkList.length; i++) {
        this.inks.push(new InkObject(this.docRef.inkList[i]));
    }
};

/**
 * Añade un documento nuevo a partir de la selección de otro documento
 * @throws {Exception} Lanza una excepción si no se ha podido crear un nuevo documento
 * @param {IllustratorDocument} illDocument Objeto IllustratorDocument de donde obtendremos la selección
 */
IllustratorDocument.prototype.addDocumentFromSelection = function (previousDoc) {
    this.addNewDocument(previousDoc.docRef.documentColorSpace, previousDoc.selRef.width, previousDoc.selRef.height);
    //this.docRef = app.documents.add(previousDoc.docRef.documentColorSpace, previousDoc.selRef.width, previousDoc.selRef.height);

    if (this.docRef == null) throw new CustomException("Error en el proceso (añadir documento)", "An error ocurred when trying to add a new document");
};

/**
 * Añade un documento nuevo con un espacio de color y tamaño determinados
 * @param {DocumentColorSpace} colorSpace El espacio de color del documento
 * @param {number}             width      El ancho del documento
 * @param {number}             height     La altura del documento
 * @param {string}             title      OPCIONAL. El nombre del documento creado
 */
IllustratorDocument.prototype.addNewDocument = function (colorSpace, width, height, title) {
    var docPreset = new DocumentPreset();
    docPreset.colorMode = colorSpace;
    docPreset.height = height;
    docPreset.width = width;
    if (title != undefined) docPreset.title = title;
    this.docRef = app.documents.addDocument("", docPreset, false);
    
    // Modificamos las propiedades de rasterizado del documento
    this.docRef.rasterEffectSettings = setRasterEffectOptions();
};

/**
 * Centra la selección en el documento
 */
IllustratorDocument.prototype.alignArtwork = function () {
    //this.selRef.position = [this.docRef.artboards[0].artboardRect[0], this.docRef.artboards[0].artboardRect[1]];
    //alert ("artboardRect: " + this.docRef.artboards[0].artboardRect);
    this.selRef.left = this.docRef.artboards[0].artboardRect[0] + ((this.docRef.width - this.selRef.width) / 2);
    this.selRef.top = this.docRef.artboards[0].artboardRect[3] + ((this.docRef.height + this.selRef.height) / 2);
};

/**
 * Cierra un documento sin guardar los cambios
 */
IllustratorDocument.prototype.closeDocument = function () {
    if (this.docRef != null) {
        this.docRef.close(SaveOptions.DONOTSAVECHANGES);
    }
    
    this.docRef = null;
};

/**
 * Obtiene una capa del documento
 * @throws {CustomException} Lanza una excepción si no encuentra la capa en el documento
 * @param   {string} layerName El nombre de la capa
 * @returns {Layer}  Devuelve la referencia a la capa o bien null si no la ha encontrado
 */
IllustratorDocument.prototype.getLayer = function (layerName) {
    var j, k;

    for (j = 0; j < this.docRef.layers.length; j++) {
        if (this.docRef.layers[j].name == layerName) return (this.docRef.layers[j]);
        for (k = 0; k < this.docRef.layers[j].layers.length; k++) {
            if (this.docRef.layers[j].layers[k].name == layerName) return (this.docRef.layers[j].layers[k]);
        }
    }

    return null;
};

/**
 * Guarda el documento actual como archivo PDF
 * @param {File}           completeFileName La ruta completa del archivo (incluida la extension)
 * @param {PDFSaveOptions} pdfOptions       Las opciones del formato PDF
 */
IllustratorDocument.prototype.saveDocumentAsPDF = function (completeFileName, pdfOptions) {
    this.docRef.saveAs(completeFileName, pdfOptions);
};

/**
 * Exporta el documento actual a archivo SVG
 * @param {File}             completePath La ruta completa del archivo (incluida la extensión)
 * @param {ExportOptionsSVG} svgOptions   Las opciones del formato SVG
 */
IllustratorDocument.prototype.saveDocumentAsSVG = function (completePath, svgOptions) {
    this.docRef.exportFile(completePath, ExportType.SVG, svgOptions);
};

/**
 * Guarda el documento actual como archivo AI
 * @param {File}                   completePath La ruta completa del archivo (incluida la extensión)
 * @param {IllustratorSaveOptions} aiOptions    Las opciones del formato AI
 */
IllustratorDocument.prototype.saveDocumentAsAI = function (completePath, aiOptions) {
    this.docRef.saveAs(completePath, aiOptions);
};

/**
 * Comprueba si el nombre del documento actual corresponde al nombre requerido
 * @param   {string}  documentName El nombre del documento a comprobar
 * @returns {boolean} Devuelve true o false si el nombre del documento es correcto o no
 */
IllustratorDocument.prototype.isRequiredTemplate = function (documentName) {
    if (this.docRef.name == documentName) return true;
    else return false;
};

/**
 * Crea una capa nueva en el documento
 * @param   {string} layerName El nombre de la capa
 * @returns {Layer}  Devuelve la referencia a la capa creada
 */
IllustratorDocument.prototype.addLayer = function (layerName) {
    var layerReference = this.docRef.layers.add();
    layerReference.name = layerName;
    layerReference.zOrder(ZOrderMethod.SENDBACKWARD);
    layerReference.zOrder(ZOrderMethod.SENDBACKWARD);

    return (layerReference);
};

/**
 * Añade a los campos del documento la información del pedido
 * @param {string} orderNumber       El número del pedido
 * @param {string} productCode       El código del producto
 * @param {string} designerShortName El nombre del diseñador
 * @param {string} printTechniques   Las técnicas de impresión usadas en el pedido
 * @param {string} fullDate          OPCIONAL. Fecha. Por defecto, la fecha actual
 */
IllustratorDocument.prototype.addorderData = function (orderNumber, productCode, designerShortName, printTechniques, fullDate) {
    // Referencia a cada objeto del PDF en la que hay que añadir información
    var objReference;
    
    if (fullDate == null) fullDate = new Date().toShortDate();

    try {
        objReference = this.docRef.textFrames.getByName("OrderNumber");
        objReference.contents += orderNumber;
        objReference = null;
    } catch (e) {}

    try {
        objReference = this.docRef.textFrames.getByName("Date");
        objReference.contents += fullDate;
        objReference = null;
    } catch (e) {}

    try {
        objReference = this.docRef.textFrames.getByName("ProductCode");
        objReference.contents += productCode;
        objReference = null;
    } catch (e) {}

    try {
        objReference = this.docRef.textFrames.getByName("PrintTechniques");
        objReference.contents += printTechniques;
        objReference = null;
    } catch (e) {}

    try {
        objReference = this.docRef.textFrames.getByName("Designer");
        objReference.contents += designerShortName;
        objReference = null;
    } catch (e) {}
};


/**
 * Establece las opciones de rasterizado
 * @returns {object} Devuelve un objeto de tipo RasterEffectSettings
 */
function setRasterEffectOptions () {
    var res = new RasterEffectOptions();
    res.antiAliasing = true;
    res.clippingMask = false;
    res.convertSpotColors = false;
    res.padding = 36.0;
    res.resolution = 1200.0;
    res.transparency = true;
    
    return res;
}
